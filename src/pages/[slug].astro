---
import { render } from "astro:content"
import { IconCode, IconFile, IconGripVertical, IconLicense, IconTerminal } from "@tabler/icons-react"
import { CodeEditor } from "~/components/shared/editor/CodeEditor"
import Navbar from "~/components/shared/navbar/Navbar.astro"
import Section from "~/components/shared/sections/Section.astro"
import { allContent } from "~/content.config"
import NavButtons from "~/features/content/components/NavButtons.astro"
import Layout from "~/layouts/Layout.astro"

export function getStaticPaths() {
	return allContent.map((tutorial) => {
		return {
			params: { slug: tutorial.slug },
			props: {
				tutorial,
				previous: tutorial.data.previousPath || null,
				next: tutorial.data.nextPath || null,
			},
		}
	})
}

const { tutorial, previous, next } = Astro.props
const { Content } = await render(tutorial)
---

<Layout>
  <Navbar />

  <div
    id="main-container"
    class="flex flex-col gap-2 lg:gap-0 lg:flex-row mx-2 max-h-[calc(100vh-75px)] mt-0 overflow-hidden"
  >
    <!-- Panel izquierdo: Contenido -->
    <Section
      id="left-pane"
      className="relative -z-10 flex-1 bg-light-bg border border-stroke-color rounded-2xl flex flex-col min-h-[250px] transition-all duration-150 overflow-x-auto"
    >
    <div id="title-info"  class="absolute left-0 top-14 w-full hidden">
        <div class="relative">
          <IconLicense stroke={2} size={14} className="rotate-90 absolute -top-9 left-4.5 text-yellow" />
          <h2 class="text-[12px] font-bold text-center rotate-90">Contenido</h2>
        </div>
      </div>
      <article id="article-info" class="scroll-container m-2 overflow-y-auto p-2">
        <article class="mb-6 text-secondary min-w-[400px]" id="content-markdown">
           <h2 class="text-xl font-bold mb-2">{tutorial.data.title}</h2>
          <Content />
          <hr class="my-6 border-gray-700" />
        </article>
      <div class="flex justify-center pb-2 mt-auto min-w-[400px]">
          <NavButtons title={tutorial.slug} previousPath={previous} nextPath={next} />
      </div>
      </article>
    </Section>

    <!-- Separador vertical (solo desktop) -->
    <div
      id="vertical-resizer"
      class="hidden lg:flex items-center justify-center w-3 hover:w-4 transition-all cursor-col-resize select-none"
    >
      <IconGripVertical size={14} />
    </div>

    <!-- Panel derecho: Editor + Terminal -->
    <Section
      id="right-pane"
      className="relative -z-10 flex-1 bg-light-bg border border-stroke-color rounded-2xl flex flex-col min-h-[250px] transition-all duration-150"
    >

    <div id="title-editor"  class="absolute left-0 top-14 w-full hidden">
        <div class="relative">
          <IconCode stroke={2} size={16} className="rotate-90 absolute -top-9 left-4.5 text-yellow" />
          <h2 class="text-[12px] font-bold text-center rotate-90">Editor</h2>
        </div>
      </div>
      


       <!-- Barra superior -->
      <div id="bar-top" class="flex justify-between border-b border-stroke-color rounded-t-2xl p-2">
        <div class="flex gap-2">
          <button
            class="flex items-center gap-1.5 bg-neutral-500/40 px-2 py-1 rounded-md hover:bg-neutral-500/70 text-sm"
          >
            <IconFile size={18} /> Código
          </button>
        </div>
      </div>

      <!-- Contenido -->
      <div id="content-editor" class="flex flex-col flex-1 overflow-hidden">
        <CodeEditor client:load />
        <div
          id="horizontal-resizer"
          class="h-2 transition-all flex justify-center items-center cursor-row-resize bg-[#181817]"
        >
          <div class="h-0.5 w-4 bg-neutral-500/40 rounded-md"></div>
        </div>

        <div
          id="terminal"
          class="h-40 overflow-auto bg-editor-bg border-t border-stroke-color rounded-b-2xl text-sm font-mono bg-dark-fg"
        >
          <div class="flex items-center gap- border-b border-stroke-color bg-light-bg px-3 py-2">
            <button
              class="flex items-center gap-2 px-3 rounded-sm text-fg font-medium shadow-inner hover:bg-neutral-600/90 transition-colors"
            >
              <IconTerminal size={18} />
              <span>Terminal</span>
            </button>
          </div>

          <div class="flex items-start p-3 text-fg">
            <span class="text-yellow">$&nbsp;</span>
            <span class="text-fg">cargo run</span>
          </div>
        </div>
      </div>
    </Section>
  </div>
</Layout>

<script lang="ts" is:inline >
  const verticalResizer = document.getElementById('vertical-resizer')
  const leftPane = document.getElementById('left-pane')
  const rightPane = document.getElementById('right-pane')
  const horizontalResizer = document.getElementById('horizontal-resizer')
  const editor = document.getElementById('editor')
  const terminal = document.getElementById('terminal')
  const articleInfo = document.getElementById('article-info')
  const contentEditor = document.getElementById('content-editor')
  const barTopEditor = document.getElementById('bar-top')
  const titleInfo = document.getElementById('title-info')
  const titleEditor = document.getElementById('title-editor')
  

  // 🔹 Ajustar al cambio de tamaño de ventana (modo móvil/deskop)
  function resetLayoutOnResize() {
    if (window.innerWidth < 1024) {
      leftPane.style.width = ''
      rightPane.style.width = ''
      leftPane.style.flex = '1'
      rightPane.style.flex = '1'
    }
  }
  window.addEventListener('resize', resetLayoutOnResize)

  // 🔹 Separador vertical (desktop)
  verticalResizer?.addEventListener('mousedown', e => {
    if (window.innerWidth < 1024) return // no en móvil
    e.preventDefault()

    // Deshabilitar transiciones y selección de texto
    leftPane.style.transition = 'none'
    rightPane.style.transition = 'none'
    document.body.style.userSelect = 'none'

    const startX = e.clientX
    const startLeftWidth = leftPane.offsetWidth
    const minWidth = 10
    const maxWidth = window.innerWidth - minWidth

    function onMouseMove(ev) {
      const dx = ev.clientX - startX
      const newLeftWidth = Math.min(Math.max(startLeftWidth + dx, minWidth), maxWidth)
      const newRightWidth = window.innerWidth - newLeftWidth - 40 // margen del separador

      leftPane.style.flex = 'none'
      rightPane.style.flex = 'none'
      leftPane.style.width = newLeftWidth + 'px'
      rightPane.style.width = newRightWidth + 'px'

      //dentro del manejador de movimiento o lógica:
      if (newLeftWidth <= 150 ) {
        leftPane.style.width = '50px'
        rightPane.style.flex = '1'
        articleInfo.style.opacity = '0'
        titleInfo.style.display = 'block'
      } else {
       articleInfo.style.opacity = '1'
       titleInfo.style.display = 'none'
      }

      if (newRightWidth <= 150) {
        rightPane.style.width = '50px'
        leftPane.style.flex = '1'
        contentEditor.style.opacity = '0'
        barTopEditor.style.opacity = '0'
        titleEditor.style.display = 'block'
      } else {
        contentEditor.style.opacity = '1'
        barTopEditor.style.opacity = '1'
        titleEditor.style.display = 'none'
      }
    }

    function onMouseUp() {
      // Restaurar transiciones y selección de texto
      leftPane.style.transition = ''
      rightPane.style.transition = ''
      document.body.style.userSelect = ''

      window.removeEventListener('mousemove', onMouseMove)
      window.removeEventListener('mouseup', onMouseUp)
    }

    window.addEventListener('mousemove', onMouseMove)
    window.addEventListener('mouseup', onMouseUp)
  })

  // 🔹 Separador horizontal (editor / terminal)
  horizontalResizer?.addEventListener('mousedown', e => {
    e.preventDefault()

    // Deshabilitar transiciones y selección de texto
    editor.style.transition = 'none'
    terminal.style.transition = 'none'
    document.body.style.userSelect = 'none'

    const startY = e.clientY
    const startEditorHeight = editor.offsetHeight
    const startTerminalHeight = terminal.offsetHeight
    const minHeight = 100
    const maxHeight = 500

    function onMouseMove(ev) {
      const dy = ev.clientY - startY
      const newEditorHeight = Math.min(Math.max(startEditorHeight + dy, minHeight), maxHeight)
      const newTerminalHeight = Math.min(Math.max(startTerminalHeight - dy, minHeight), maxHeight)
      editor.style.height = newEditorHeight + 'px'
      terminal.style.height = newTerminalHeight + 'px'
    }

    function onMouseUp() {
      // Restaurar transiciones y selección de texto
      editor.style.transition = ''
      terminal.style.transition = ''
      document.body.style.userSelect = ''

      window.removeEventListener('mousemove', onMouseMove)
      window.removeEventListener('mouseup', onMouseUp)
    }

    window.addEventListener('mousemove', onMouseMove)
    window.addEventListener('mouseup', onMouseUp)
  })
</script>
