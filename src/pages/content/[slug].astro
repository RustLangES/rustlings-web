---
import Playground from "@components/shared/playground"
import Section from "@components/shared/sections/Section.astro"
import NavButtons from "@features/content/components/NavButtons.astro"
import LayoutContent from "@layouts/LayoutContent.astro"
import { IconFile, IconGripVertical, IconPlayerPlay } from "@tabler/icons-react"
import { content } from "@utils/lib/content.config"

export function getStaticPaths() {
	const sortedTutorials = content
		.filter((t) => !!t.frontmatter?.slug)
		.sort((a, b) => (a.frontmatter.order ?? 0) - (b.frontmatter.order ?? 0))

	return sortedTutorials.map((tutorial, i) => {
		const prev = i > 0 ? sortedTutorials[i - 1].frontmatter.slug : null
		const next = i < sortedTutorials.length - 1 ? sortedTutorials[i + 1].frontmatter.slug : null

		return {
			params: { slug: tutorial.frontmatter.slug },
			props: {
				tutorial,
				previousPath: prev,
				nextPath: next,
			},
		}
	})
}
---

<LayoutContent>
  <div id="main-container" class="flex flex-col gap-2 lg:gap-0 lg:flex-row mx-2 max-h-[calc(100vh-75px)] mt-0">
    <!-- Panel izquierdo: Contenido -->
    <Section
      id="left-pane"
      className="flex-1 bg-light-bg border border-stroke-color  rounded-2xl flex flex-col min-h-[250px] transition-all duration-150 "
    >
      <article class="scroll-container m-2 overflow-y-auto p-2">
        <article class="mb-6 text-secondary" id="content-markdown">
          <h2 class="text-xl font-bold mb-2">{Astro.props.tutorial.frontmatter.title}</h2>
          <Astro.props.tutorial.Content />
          <hr class="my-6 border-gray-700" />
        </article>
      </article>
      <div class="flex justify-center p-3 mt-auto">
        <NavButtons
          previousPath={Astro.props.previousPath}
          nextPath={Astro.props.nextPath}
        />
      </div>
    </Section>

    <!-- Separador vertical (solo desktop) -->
    <div
      id="vertical-resizer"
      class="hidden lg:flex items-center justify-center w-3 hover:w-4 transition-all cursor-col-resize select-none"
    >
      <IconGripVertical size={14} />
    </div>

    <!-- Panel derecho: Editor + Terminal -->
    <Section
      id="right-pane"
      className="flex-1 bg-light-bg border border-stroke-color rounded-2xl flex flex-col min-h-[250px] transition-all duration-150"
    >
      <!-- Barra superior -->
      <div class="flex justify-between border-b border-stroke-color rounded-t-2xl p-2">
        <div class="flex gap-2">
          <button
            class="flex items-center gap-1.5 bg-neutral-500/40 px-2 py-1 rounded-md hover:bg-neutral-500/70 text-sm"
          >
            <IconFile size={18} /> Código
          </button>
        </div>
        <button
          class="flex items-center gap-1.5 bg-neutral-500/40 px-2 py-1 rounded-md hover:bg-neutral-500/70 text-sm"
        >
          <IconPlayerPlay size={18} /> Ejecutar
        </button>
      </div>

      <!-- Contenido -->
      <div class="flex flex-col flex-1 overflow-hidden">
        <Playground client:load/>
        <div
          id="horizontal-resizer"
          class="h-2 transition-all flex justify-center items-center cursor-row-resize bg-[#181817]"
        >
        <div class="h-0.5 w-4 bg-neutral-500/40 rounded-md"></div>
        </div>
        
        <div
          id="terminal"
          class="h-40 overflow-auto bg-editor-bg border-t rounded-b-2xl border-stroke-color p-2 text-sm font-mono relative"
        >
         
          <span class="text-yellow">$ <span class="text-fg">cargo</span> run</span>
        </div>
      </div>
    </Section>
  </div>
</LayoutContent>

<script lang="ts" is:inline>
  const verticalResizer = document.getElementById('vertical-resizer')
  const leftPane = document.getElementById('left-pane')
  const rightPane = document.getElementById('right-pane')
  const horizontalResizer = document.getElementById('horizontal-resizer')
  const editor = document.getElementById('editor')
  const terminal = document.getElementById('terminal')

  // 🔹 Ajustar al cambio de tamaño de ventana (modo móvil/deskop)
  function resetLayoutOnResize() {
    if (window.innerWidth < 1024) {
      leftPane.style.width = ''
      rightPane.style.width = ''
      leftPane.style.flex = '1'
      rightPane.style.flex = '1'
    }
  }
  window.addEventListener('resize', resetLayoutOnResize)


  // 🔹 Separador vertical (desktop)
  verticalResizer?.addEventListener('mousedown', e => {
    if (window.innerWidth < 1024) return // no en móvil
    e.preventDefault()

    // Deshabilitar transiciones y selección de texto
    leftPane.style.transition = 'none'
    rightPane.style.transition = 'none'
    document.body.style.userSelect = 'none'

    const startX = e.clientX
    const startLeftWidth = leftPane.offsetWidth
    const minWidth = 250
    const maxWidth = window.innerWidth - minWidth

    function onMouseMove(ev) {
      const dx = ev.clientX - startX
      const newLeftWidth = Math.min(Math.max(startLeftWidth + dx, minWidth), maxWidth)
      const newRightWidth = window.innerWidth - newLeftWidth - 40 // margen del separador
      leftPane.style.flex = 'none'
      rightPane.style.flex = 'none'
      leftPane.style.width = newLeftWidth + 'px'
      rightPane.style.width = newRightWidth + 'px'
    }

    function onMouseUp() {
      // Restaurar transiciones y selección de texto
      leftPane.style.transition = ''
      rightPane.style.transition = ''
      document.body.style.userSelect = ''

      window.removeEventListener('mousemove', onMouseMove)
      window.removeEventListener('mouseup', onMouseUp)
    }

    window.addEventListener('mousemove', onMouseMove)
    window.addEventListener('mouseup', onMouseUp)
  })

  // 🔹 Separador horizontal (editor / terminal)
  horizontalResizer?.addEventListener('mousedown', e => {
    e.preventDefault()

    // Deshabilitar transiciones y selección de texto
    editor.style.transition = 'none'
    terminal.style.transition = 'none'
    document.body.style.userSelect = 'none'

    const startY = e.clientY
    const startEditorHeight = editor.offsetHeight
    const startTerminalHeight = terminal.offsetHeight
    const minHeight = 100
    const maxHeight = 500

    function onMouseMove(ev) {
      const dy = ev.clientY - startY
      const newEditorHeight = Math.min(Math.max(startEditorHeight + dy, minHeight), maxHeight)
      const newTerminalHeight = Math.min(Math.max(startTerminalHeight - dy, minHeight), maxHeight)
      editor.style.height = newEditorHeight + 'px'
      terminal.style.height = newTerminalHeight + 'px'
    }

    function onMouseUp() {
      // Restaurar transiciones y selección de texto
      editor.style.transition = ''
      terminal.style.transition = ''
      document.body.style.userSelect = ''

      window.removeEventListener('mousemove', onMouseMove)
      window.removeEventListener('mouseup', onMouseUp)
    }

    window.addEventListener('mousemove', onMouseMove)
    window.addEventListener('mouseup', onMouseUp)
  })
</script>